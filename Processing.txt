# -*- coding: utf-8 -*-
"""Copy of model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C5kp8rXaIL2EmzkPhQfujObcWjfK62x8

# Data Google Drive
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/MyDrive/Colab-Notebooks/final-project/PPDM

"""# Library"""

from flask import Flask, render_template, url_for #Flask adalah framework web untuk Python.
import numpy as np #NumPy digunakan untuk berbagai operasi numerik.
import pandas as pd #untuk mengelola data tabular
import csv #membaca format dataset
import matplotlib.pyplot as plt #untuk membuat visualisasi data.
from sklearn import model_selection #digunakan untuk pemilihan model (latih dan pengujian) dan evaluasi kinerja model.
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import svm
from sklearn.metrics import accuracy_score

# Packages for visuals
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(font_scale=1.2) #digunakan untuk mengatur skala ukuran font pada plot.

import re #modul ini untuk melakukan operasi-operasi seperti pencocokan pola, penggantian teks, pemisahan teks,
!pip install Sastrawi
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
from nltk.tokenize import word_tokenize
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory

"""# Import Data"""

reviews = pd.read_csv("reviews.csv")

reviews

"""# Preprocessing"""

#Objek stemmer akan digunakan untuk memotong kata-kata dalam teks menjadi bentuk dasar atau kata dasar.
factory = StemmerFactory()
stemmer = factory.create_stemmer()

#Objek stopword akan digunakan untuk menghapus kata-kata umum dalam teks.
factory = StopWordRemoverFactory()
stopword = factory.create_stop_word_remover()

factory = StemmerFactory()
stemmer = factory.create_stemmer()

#semua teks dalam kolom 'Reviews' dari DataFrame 'reviews' diubah menjadi huruf kecil (lowercase).
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: x.lower())

#menghapus karakter newline ('\n') dari teks dalam kolom 'Reviews'.
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: x.replace('\n', ''))

#menggunakan ekspresi reguler, semua karakter selain huruf (non-alphabetic characters) dalam teks diubah menjadi spasi.
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: re.compile('[^a-zA-Z]').sub(" ", x))

#membagi teks menjadi kata", contoh 'kemeja', 'nya', 'bagus'
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: x.split())

def removeAkhir(s):

  cadangan = s[-1]
  s = s.rstrip(s[-1])

  return s + cadangan

reviews['Reviews'] = reviews['Reviews'].apply(lambda x: [removeAkhir(i) for i in x])
#menghapus karakter terakhir dari setiap kata dalam daftar kata-kata.

reviews['Reviews'] = reviews['Reviews'].apply(lambda x: [i for i in x if len(i) > 2])
#menghapus kaliman yang hanya 2 huruf

reviews['Reviews'] = reviews['Reviews'].apply(lambda x: " ".join(x))
#mengubah kata" menjadi string, contoh 'kemeja', 'nya'--> kemeja nya
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: stopword.remove(x))
#menghapus kata" yang tidak perlu
reviews['Reviews'] = reviews['Reviews'].apply(lambda x: stemmer.stem(x))
#stemmer yang telah dibuat sebelumnya untuk memotong kata-kata dalam teks menjadi bentuk dasar atau kata dasar. kependekan --> pendek

reviews

# reviews.to_csv(r"/content/drive/MyDrive/Colab-Notebooks/final-project/preprocessed-data.csv")
# reviews = pd.read_csv("preprocessed-data.csv")

"""# Split the data into training and test sets"""

train_X, test_X, train_Y, test_Y = model_selection.train_test_split(reviews['Reviews'], reviews['Label'], test_size = 0.2, random_state = 0)

df_train80 = pd.DataFrame()
df_train80['Reviews'] = train_X
df_train80['Label'] = train_Y

df_test20 = pd.DataFrame()
df_test20['Reviews'] = test_X
df_test20['Label'] = test_Y

df_train80

df_test20

#df_train80.to_csv('df_train80.csv')
#df_test20.to_csv('df_test20.csv')

"""# Feature Extraction
TF-IDF
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vect_8020 = TfidfVectorizer(max_features = 5000)
tfidf_vect_8020.fit(reviews['Reviews'])
train_X_tfidf_8020 = tfidf_vect_8020.transform(df_train80['Reviews'])
test_X_tfidf_8020 = tfidf_vect_8020.transform(df_test20['Reviews'])

print(train_X_tfidf_8020)

print(test_X_tfidf_8020)

print(train_X_tfidf_8020.shape)
print(test_X_tfidf_8020.shape)

#print(tfidf_vect_8020.vocabulary_)

"""# Feature Selection
Chi-Square = [10%, 20%, 30%]
"""

#Chi-Square = [10%, 20%, 30%]
from sklearn.feature_selection import SelectKBest, chi2

percent_kept = 0.1  # Ubah value ini sesuai keinginan
num_features = int(percent_kept * train_X_tfidf_8020.shape[1])
selector = SelectKBest(chi2, k=num_features)
train_X_tfidf_8020_selected = selector.fit_transform(train_X_tfidf_8020, train_Y)
test_X_tfidf_8020_selected = selector.transform(test_X_tfidf_8020)

"""# Proses Pelatihan
Chi-square = 0.1, 0.2, atau 0.3
C= 0.1, 1, 10, atau 100, nilai gamma = 0.0001, 0.001, 0.1, atau 1, dan fungsi kernel: rbf atau polynomial

Chi Square = 0.1	Parameter: c=10, kernel=rbf, gamma=0.1
Akurasi: 93.4

Chi Square = 0.1	Parameter: c=100, kernel=rbf, gamma=0.1
Akurasi: 93.4

Chi Square = 0.2	Parameter: c=100, kernel=rbf, gamma=0.1
Akurasi: 93.4

Chi Square = 0.3	Parameter: c=10, kernel=rbf, gamma=0.1
Akurasi: 93.4

Chi Square = 0.3	Parameter: c=100, kernel=rbf, gamma=0.1
Akurasi: 93.4


"""

from sklearn.svm import SVC

model = SVC(C=10, kernel='rbf', gamma=0.1)
model.fit(train_X_tfidf_8020,train_Y)

"""# Proses Pengujian"""

from sklearn.metrics import accuracy_score

predictions_SVM_8020 = model.predict(test_X_tfidf_8020)
test_prediction_8020 = pd.DataFrame()
test_prediction_8020['Reviews'] = test_X
test_prediction_8020['Label'] = predictions_SVM_8020
SVM_accuracy_8020 = accuracy_score(predictions_SVM_8020, test_Y)*100
SVM_accuracy_8020 = round(SVM_accuracy_8020,1)

#test_prediction_8020

#test_prediction_8020.to_csv("test_prediction_8020.csv")

SVM_accuracy_8020

"""# Accuracy, Precision, Recall, f1-score"""

from sklearn.metrics import classification_report

print ("\nHere is the classification report:")
print (classification_report(test_Y, predictions_SVM_8020, zero_division='warn'))

"""# Test the SVM classifier"""

review = "barangnya jelek banget"
review_vector = tfidf_vect_8020.transform([review]) # vectorizing
#print(model.predict(review_vector))

if(model.predict(review_vector)==1):
  print("Positif")
else:
  print("Negatif")

"""# Save the trained model and vectorizer"""

import joblib
joblib.dump(model, "model.pkl")
joblib.dump(tfidf_vect_8020, "vectorizer.pkl")

"""# Mencari Parameter Terbaik

"""

import pandas as pd
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.feature_selection import SelectKBest, chi2

chi = [0.1, 0.2, 0.3]
c = [0.1, 1, 10, 100]
kernel = ['rbf', 'poly']
gamma = [0.0001, 0.001, 0.1, 1, 'scale', 'auto']

def mulai(h, i, j, k):
    percent_kept = h
    num_features = int(percent_kept * train_X_tfidf_8020.shape[1])
    selector = SelectKBest(chi2, k=num_features)
    train_X_tfidf_8020_selected = selector.fit_transform(train_X_tfidf_8020, train_Y)
    test_X_tfidf_8020_selected = selector.transform(test_X_tfidf_8020)

    print(f"Chi Square = {h}\tParameter: c={i}, kernel={j}, gamma={k}")
    model = SVC(C=i, kernel=j, gamma=k)
    model.fit(train_X_tfidf_8020_selected, train_Y)

    predictions_SVM_8020 = model.predict(test_X_tfidf_8020_selected)
    test_prediction_8020 = pd.DataFrame()
    test_prediction_8020['Reviews'] = test_X
    test_prediction_8020['Label'] = predictions_SVM_8020
    SVM_accuracy_8020 = accuracy_score(predictions_SVM_8020, test_Y) * 100
    SVM_accuracy_8020 = round(SVM_accuracy_8020, 1)

    print(f"Akurasi: {SVM_accuracy_8020}")
    print("Here is the classification report:")
    print(classification_report(test_Y, predictions_SVM_8020, zero_division=0.0), end="\n")
    print("============================================================")

    data.append({'Chi Square': h, 'C': i, 'Kernel': j, 'Gamma': k, 'Accuracy': SVM_accuracy_8020})

for h in chi:
  data = []
  print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
  print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
  for i in c:
    for j in kernel:
      for k in gamma:
        mulai(h, i, j, k)
  df = pd.DataFrame(data)

  # Sort the DataFrame by Accuracy in descending order
  df_sorted = df.sort_values('Accuracy', ascending=False)

  # Count the number of combinations with the same accuracy
  accuracy_counts = df_sorted['Accuracy'].value_counts().reset_index()
  accuracy_counts.columns = ['Accuracy', 'Count']
  accuracy_counts_sorted = accuracy_counts.sort_values('Accuracy', ascending=False)

  print("All Combinations:")
  print(df)
  print("\nWorst Combination:")
  print(df_sorted.tail(1))
  print("\nModerate Combination:")
  print(df_sorted.iloc[len(df_sorted) // 2])
  print("\nBest Combination:")
  print(df_sorted.head(1))
  print("\nAccuracy Counts:")
  print(accuracy_counts_sorted)
